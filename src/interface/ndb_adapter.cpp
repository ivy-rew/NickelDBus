/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c NDBAdapter -a ndb_adapter com.github.shermp.nickeldbus.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "ndb_adapter.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class NDBAdapter
 */

NDBAdapter::NDBAdapter(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

NDBAdapter::~NDBAdapter()
{
    // destructor
}

void NDBAdapter::bwmOpenBrowser()
{
    // handle method call com.github.shermp.nickeldbus.bwmOpenBrowser
    QMetaObject::invokeMethod(parent(), "bwmOpenBrowser");
}

void NDBAdapter::bwmOpenBrowser(bool modal)
{
    // handle method call com.github.shermp.nickeldbus.bwmOpenBrowser
    QMetaObject::invokeMethod(parent(), "bwmOpenBrowser", Q_ARG(bool, modal));
}

void NDBAdapter::bwmOpenBrowser(bool modal, const QString &url)
{
    // handle method call com.github.shermp.nickeldbus.bwmOpenBrowser
    QMetaObject::invokeMethod(parent(), "bwmOpenBrowser", Q_ARG(bool, modal), Q_ARG(QString, url));
}

void NDBAdapter::bwmOpenBrowser(bool modal, const QString &url, const QString &css)
{
    // handle method call com.github.shermp.nickeldbus.bwmOpenBrowser
    QMetaObject::invokeMethod(parent(), "bwmOpenBrowser", Q_ARG(bool, modal), Q_ARG(QString, url), Q_ARG(QString, css));
}

void NDBAdapter::dlgConfirmAccept(const QString &title, const QString &body, const QString &acceptText)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmAccept
    QMetaObject::invokeMethod(parent(), "dlgConfirmAccept", Q_ARG(QString, title), Q_ARG(QString, body), Q_ARG(QString, acceptText));
}

void NDBAdapter::dlgConfirmAcceptReject(const QString &title, const QString &body, const QString &acceptText, const QString &rejectText)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmAcceptReject
    QMetaObject::invokeMethod(parent(), "dlgConfirmAcceptReject", Q_ARG(QString, title), Q_ARG(QString, body), Q_ARG(QString, acceptText), Q_ARG(QString, rejectText));
}

void NDBAdapter::dlgConfirmClose()
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmClose
    QMetaObject::invokeMethod(parent(), "dlgConfirmClose");
}

void NDBAdapter::dlgConfirmCreate()
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmCreate
    QMetaObject::invokeMethod(parent(), "dlgConfirmCreate");
}

void NDBAdapter::dlgConfirmCreate(bool createLineEdit)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmCreate
    QMetaObject::invokeMethod(parent(), "dlgConfirmCreate", Q_ARG(bool, createLineEdit));
}

void NDBAdapter::dlgConfirmNoBtn(const QString &title, const QString &body)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmNoBtn
    QMetaObject::invokeMethod(parent(), "dlgConfirmNoBtn", Q_ARG(QString, title), Q_ARG(QString, body));
}

void NDBAdapter::dlgConfirmReject(const QString &title, const QString &body, const QString &rejectText)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmReject
    QMetaObject::invokeMethod(parent(), "dlgConfirmReject", Q_ARG(QString, title), Q_ARG(QString, body), Q_ARG(QString, rejectText));
}

void NDBAdapter::dlgConfirmSetAccept(const QString &acceptText)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetAccept
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetAccept", Q_ARG(QString, acceptText));
}

void NDBAdapter::dlgConfirmSetBody(const QString &body)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetBody
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetBody", Q_ARG(QString, body));
}

void NDBAdapter::dlgConfirmSetLEPassword(bool password)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetLEPassword
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetLEPassword", Q_ARG(bool, password));
}

void NDBAdapter::dlgConfirmSetLEPlaceholder(const QString &placeholder)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetLEPlaceholder
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetLEPlaceholder", Q_ARG(QString, placeholder));
}

void NDBAdapter::dlgConfirmSetModal(bool modal)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetModal
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetModal", Q_ARG(bool, modal));
}

void NDBAdapter::dlgConfirmSetProgress(int min, int max, int val)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetProgress
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetProgress", Q_ARG(int, min), Q_ARG(int, max), Q_ARG(int, val));
}

void NDBAdapter::dlgConfirmSetProgress(int min, int max, int val, const QString &format)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetProgress
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetProgress", Q_ARG(int, min), Q_ARG(int, max), Q_ARG(int, val), Q_ARG(QString, format));
}

void NDBAdapter::dlgConfirmSetReject(const QString &rejectText)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetReject
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetReject", Q_ARG(QString, rejectText));
}

void NDBAdapter::dlgConfirmSetTitle(const QString &title)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmSetTitle
    QMetaObject::invokeMethod(parent(), "dlgConfirmSetTitle", Q_ARG(QString, title));
}

void NDBAdapter::dlgConfirmShow()
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmShow
    QMetaObject::invokeMethod(parent(), "dlgConfirmShow");
}

void NDBAdapter::dlgConfirmShowClose(bool show)
{
    // handle method call com.github.shermp.nickeldbus.dlgConfirmShowClose
    QMetaObject::invokeMethod(parent(), "dlgConfirmShowClose", Q_ARG(bool, show));
}

QString NDBAdapter::imgSizeForType(const QString &type)
{
    // handle method call com.github.shermp.nickeldbus.imgSizeForType
    QString out0;
    QMetaObject::invokeMethod(parent(), "imgSizeForType", Q_RETURN_ARG(QString, out0), Q_ARG(QString, type));
    return out0;
}

void NDBAdapter::mwcHome()
{
    // handle method call com.github.shermp.nickeldbus.mwcHome
    QMetaObject::invokeMethod(parent(), "mwcHome");
}

void NDBAdapter::mwcToast(int toastDuration, const QString &msgMain)
{
    // handle method call com.github.shermp.nickeldbus.mwcToast
    QMetaObject::invokeMethod(parent(), "mwcToast", Q_ARG(int, toastDuration), Q_ARG(QString, msgMain));
}

void NDBAdapter::mwcToast(int toastDuration, const QString &msgMain, const QString &msgSub)
{
    // handle method call com.github.shermp.nickeldbus.mwcToast
    QMetaObject::invokeMethod(parent(), "mwcToast", Q_ARG(int, toastDuration), Q_ARG(QString, msgMain), Q_ARG(QString, msgSub));
}

void NDBAdapter::n3fssSyncBoth()
{
    // handle method call com.github.shermp.nickeldbus.n3fssSyncBoth
    QMetaObject::invokeMethod(parent(), "n3fssSyncBoth");
}

void NDBAdapter::n3fssSyncOnboard()
{
    // handle method call com.github.shermp.nickeldbus.n3fssSyncOnboard
    QMetaObject::invokeMethod(parent(), "n3fssSyncOnboard");
}

void NDBAdapter::n3fssSyncSD()
{
    // handle method call com.github.shermp.nickeldbus.n3fssSyncSD
    QMetaObject::invokeMethod(parent(), "n3fssSyncSD");
}

QString NDBAdapter::ndbCurrentView()
{
    // handle method call com.github.shermp.nickeldbus.ndbCurrentView
    QString out0;
    QMetaObject::invokeMethod(parent(), "ndbCurrentView", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString NDBAdapter::ndbFirmwareVersion()
{
    // handle method call com.github.shermp.nickeldbus.ndbFirmwareVersion
    QString out0;
    QMetaObject::invokeMethod(parent(), "ndbFirmwareVersion", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString NDBAdapter::ndbNickelClassDetails(const QString &staticMmetaobjectSymbol)
{
    // handle method call com.github.shermp.nickeldbus.ndbNickelClassDetails
    QString out0;
    QMetaObject::invokeMethod(parent(), "ndbNickelClassDetails", Q_RETURN_ARG(QString, out0), Q_ARG(QString, staticMmetaobjectSymbol));
    return out0;
}

QString NDBAdapter::ndbNickelWidgets()
{
    // handle method call com.github.shermp.nickeldbus.ndbNickelWidgets
    QString out0;
    QMetaObject::invokeMethod(parent(), "ndbNickelWidgets", Q_RETURN_ARG(QString, out0));
    return out0;
}

bool NDBAdapter::ndbSignalConnected(const QString &signalName)
{
    // handle method call com.github.shermp.nickeldbus.ndbSignalConnected
    bool out0;
    QMetaObject::invokeMethod(parent(), "ndbSignalConnected", Q_RETURN_ARG(bool, out0), Q_ARG(QString, signalName));
    return out0;
}

QString NDBAdapter::ndbVersion()
{
    // handle method call com.github.shermp.nickeldbus.ndbVersion
    QString out0;
    QMetaObject::invokeMethod(parent(), "ndbVersion", Q_RETURN_ARG(QString, out0));
    return out0;
}

void NDBAdapter::ndbWifiKeepalive(bool keepalive)
{
    // handle method call com.github.shermp.nickeldbus.ndbWifiKeepalive
    QMetaObject::invokeMethod(parent(), "ndbWifiKeepalive", Q_ARG(bool, keepalive));
}

void NDBAdapter::nsAutoUSBGadget(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.nsAutoUSBGadget
    QMetaObject::invokeMethod(parent(), "nsAutoUSBGadget", Q_ARG(QString, action));
}

void NDBAdapter::nsDarkMode(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.nsDarkMode
    QMetaObject::invokeMethod(parent(), "nsDarkMode", Q_ARG(QString, action));
}

void NDBAdapter::nsForceWifi(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.nsForceWifi
    QMetaObject::invokeMethod(parent(), "nsForceWifi", Q_ARG(QString, action));
}

void NDBAdapter::nsInvert(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.nsInvert
    QMetaObject::invokeMethod(parent(), "nsInvert", Q_ARG(QString, action));
}

void NDBAdapter::nsLockscreen(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.nsLockscreen
    QMetaObject::invokeMethod(parent(), "nsLockscreen", Q_ARG(QString, action));
}

void NDBAdapter::nsScreenshots(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.nsScreenshots
    QMetaObject::invokeMethod(parent(), "nsScreenshots", Q_ARG(QString, action));
}

void NDBAdapter::pfmRescanBooks()
{
    // handle method call com.github.shermp.nickeldbus.pfmRescanBooks
    QMetaObject::invokeMethod(parent(), "pfmRescanBooks");
}

void NDBAdapter::pfmRescanBooksFull()
{
    // handle method call com.github.shermp.nickeldbus.pfmRescanBooksFull
    QMetaObject::invokeMethod(parent(), "pfmRescanBooksFull");
}

void NDBAdapter::pwrReboot()
{
    // handle method call com.github.shermp.nickeldbus.pwrReboot
    QMetaObject::invokeMethod(parent(), "pwrReboot");
}

void NDBAdapter::pwrShutdown()
{
    // handle method call com.github.shermp.nickeldbus.pwrShutdown
    QMetaObject::invokeMethod(parent(), "pwrShutdown");
}

void NDBAdapter::pwrSleep()
{
    // handle method call com.github.shermp.nickeldbus.pwrSleep
    QMetaObject::invokeMethod(parent(), "pwrSleep");
}

void NDBAdapter::wfmConnectWireless()
{
    // handle method call com.github.shermp.nickeldbus.wfmConnectWireless
    QMetaObject::invokeMethod(parent(), "wfmConnectWireless");
}

void NDBAdapter::wfmConnectWirelessSilently()
{
    // handle method call com.github.shermp.nickeldbus.wfmConnectWirelessSilently
    QMetaObject::invokeMethod(parent(), "wfmConnectWirelessSilently");
}

void NDBAdapter::wfmSetAirplaneMode(const QString &action)
{
    // handle method call com.github.shermp.nickeldbus.wfmSetAirplaneMode
    QMetaObject::invokeMethod(parent(), "wfmSetAirplaneMode", Q_ARG(QString, action));
}

